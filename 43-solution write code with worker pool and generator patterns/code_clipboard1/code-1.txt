func createWorkerPool(noOfWorkers int, jobs chan Job) chan Result {
	var wg sync.WaitGroup
	results := make(chan Result, 10)
	go func() {
		defer close(results)
		defer wg.Wait()
		for i := 0; i < noOfWorkers; i++ {
			wg.Add(1)
			go func(i int) {
				defer wg.Done()
				for job := range jobs {
					output := Result{job, digits(job.randomno), i}
					results <- output
				}
			}(i)
		}
	}()
	return results
}