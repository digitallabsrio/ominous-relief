{
  "course_name": "Concurrency in Go - Learn Interactively",
  "course_overview": "Go (also known as Golang) is one of the most popular languages today and is a key part of many enterprise tech stacks. Because Go's memory management architecture makes concurrency easier, many developers prefer it over traditional languages.\n\nIn this course, you will learn the core constructs and techniques of Go as well as advanced concepts of the language. In particular, you’ll learn how to program efficiently by becoming aware of the pitfalls and patterns that are commonly encountered in Go and by building your own applications.\n\nOnce you’ve completed this course, you will be able to write concurrent programs and improve the performance of existing ones, thus creating a more robust experience for everyone. Concurrency is in high demand today since it enables developers to reduce execution time of applications significantly, and Golang provides a very rich support for achieving this.",
  "course_folder": "concurrency in go",
  "course_lessons": [
    "0-introduction to concurrency in golang",
    "1-what is concurrency",
    "2-what is parallelism",
    "3-print an alphabet using parallelism",
    "4-quiz",
    "5-deadlock",
    "6-practical implementation for deadlock",
    "7-race condition",
    "8-challenge write code with a race condition",
    "9-solution write code with a race condition",
    "10-livelock",
    "11-challenge write code with livelock",
    "12-solution write code with livelock",
    "13-starvation",
    "14-quiz",
    "15-mutex",
    "16-challenge perform a concurrent read write operation on a map",
    "17-solution perform a concurrent read write operation on a map",
    "18-atomic",
    "19-waitgroup",
    "20-challenge write code with waitgroup",
    "21-solution write code with waitgroup",
    "22-quiz",
    "23-all about goroutines",
    "24-anonymous goroutine",
    "25-quiz",
    "26-what is a channel",
    "27-directional nature of the channel",
    "28-challenge write code with a unidirectional channel",
    "29-solution write code with a unidirectional channel",
    "30-buffer channel",
    "31-channels internals",
    "32-quiz",
    "33-what is a design pattern",
    "34-generator pattern",
    "35-challenge write code with a generator pattern",
    "36-solution write code with a generator pattern",
    "37-pipeline pattern",
    "38-challenge write code with a pipeline pattern",
    "39-solution write code with a pipeline pattern",
    "40-worker pool pattern",
    "41-challenge write code with worker pool pattern",
    "42-solution write code with worker pool pattern",
    "43-solution write code with worker pool and generator patterns",
    "44-single producer and consumer",
    "45-multiple producers and consumers",
    "46-fan in",
    "47-multiple producers and a single consumer",
    "48-fan out",
    "49-single producer and multiple consumers",
    "50-timeout using select",
    "51-challenge write code using select that times out",
    "52-solution write code using select that times out",
    "53-quit channel",
    "54-quiz",
    "55-conclusion"
  ],
  "repo_name": "ominous-relief"
}
